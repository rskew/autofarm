'use strict';

require('http');

// Generated by purs version 0.15.4
var semigroupoidFn = {
    compose: function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    }
};

// Generated by purs version 0.15.4
var identity = function (dict) {
    return dict.identity;
};
var categoryFn = {
    identity: function (x) {
        return x;
    },
    Semigroupoid0: function () {
        return semigroupoidFn;
    }
};

// Generated by purs version 0.15.4
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};

const unit = undefined;

// Generated by purs version 0.15.4
var map = function (dict) {
    return dict.map;
};

// Generated by purs version 0.15.4
var pure = function (dict) {
    return dict.pure;
};

// Generated by purs version 0.15.4
var discard = function (dict) {
    return dict.discard;
};
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return flip(bind(dictBind));
};
var discardUnit = {
    discard: function (dictBind) {
        return bind(dictBind);
    }
};

// Generated by purs version 0.15.4
var ap = function (dictMonad) {
    var bind$1 = bind(dictMonad.Bind1());
    var pure$1 = pure(dictMonad.Applicative0());
    return function (f) {
        return function (a) {
            return bind$1(f)(function (f$prime) {
                return bind$1(a)(function (a$prime) {
                    return pure$1(f$prime(a$prime));
                });
            });
        };
    };
};

// Generated by purs version 0.15.4
var append = function (dict) {
    return dict.append;
};

const showIntImpl = function (n) {
  return n.toString();
};

// Generated by purs version 0.15.4
var showInt = {
    show: showIntImpl
};
var show = function (dict) {
    return dict.show;
};

// Generated by purs version 0.15.4
var Nothing = /* #__PURE__ */ (function () {
    function Nothing() {

    }    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = /* #__PURE__ */ (function () {
    function Just(value0) {
        this.value0 = value0;
    }    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();

// Generated by purs version 0.15.4
var Loop = /* #__PURE__ */ (function () {
    function Loop(value0) {
        this.value0 = value0;
    }    Loop.create = function (value0) {
        return new Loop(value0);
    };
    return Loop;
})();
var Done = /* #__PURE__ */ (function () {
    function Done(value0) {
        this.value0 = value0;
    }    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();
var tailRecM = function (dict) {
    return dict.tailRecM;
};

// Generated by purs version 0.15.4
var Tuple = /* #__PURE__ */ (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();

// Generated by purs version 0.15.4
var Nil = /* #__PURE__ */ (function () {
    function Nil() {

    }    Nil.value = new Nil();
    return Nil;
})();
var Cons = /* #__PURE__ */ (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();

// Generated by purs version 0.15.4
var reverse = /* #__PURE__ */ (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return acc;
                }                if (v instanceof Cons) {
                    $tco_var_acc = new Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                }                throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
            }            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }            return $tco_result;
        };
    };
    return go(Nil.value);
})();

// Generated by purs version 0.15.4
var CatQueue = /* #__PURE__ */ (function () {
    function CatQueue(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    CatQueue.create = function (value0) {
        return function (value1) {
            return new CatQueue(value0, value1);
        };
    };
    return CatQueue;
})();
var uncons = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
            $tco_done = true;
            return Nothing.value;
        }        if (v.value0 instanceof Nil) {
            $copy_v = new CatQueue(reverse(v.value1), Nil.value);
            return;
        }        if (v.value0 instanceof Cons) {
            $tco_done = true;
            return new Just(new Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
        }        throw new Error("Failed pattern match at Data.CatQueue (line 82, column 1 - line 82, column 63): " + [ v.constructor.name ]);
    }    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    }    return $tco_result;
};
var snoc = function (v) {
    return function (a) {
        return new CatQueue(v.value0, new Cons(a, v.value1));
    };
};
var $$null = function (v) {
    if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
        return true;
    }    return false;
};
var empty = /* #__PURE__ */ (function () {
    return new CatQueue(Nil.value, Nil.value);
})();

// Generated by purs version 0.15.4
var CatNil = /* #__PURE__ */ (function () {
    function CatNil() {

    }    CatNil.value = new CatNil();
    return CatNil;
})();
var CatCons = /* #__PURE__ */ (function () {
    function CatCons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    CatCons.create = function (value0) {
        return function (value1) {
            return new CatCons(value0, value1);
        };
    };
    return CatCons;
})();
var link = function (v) {
    return function (v1) {
        if (v instanceof CatNil) {
            return v1;
        }        if (v1 instanceof CatNil) {
            return v;
        }        if (v instanceof CatCons) {
            return new CatCons(v.value0, snoc(v.value1)(v1));
        }        throw new Error("Failed pattern match at Data.CatList (line 108, column 1 - line 108, column 54): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var foldr = function (k) {
    return function (b) {
        return function (q) {
            var foldl = function ($copy_v) {
                return function ($copy_c) {
                    return function ($copy_v1) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_c = $copy_c;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, c, v1) {
                            if (v1 instanceof Nil) {
                                $tco_done = true;
                                return c;
                            }                            if (v1 instanceof Cons) {
                                $tco_var_v = v;
                                $tco_var_c = v(c)(v1.value0);
                                $copy_v1 = v1.value1;
                                return;
                            }                            throw new Error("Failed pattern match at Data.CatList (line 124, column 3 - line 124, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                        }                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                        }                        return $tco_result;
                    };
                };
            };
            var go = function ($copy_xs) {
                return function ($copy_ys) {
                    var $tco_var_xs = $copy_xs;
                    var $tco_done1 = false;
                    var $tco_result;
                    function $tco_loop(xs, ys) {
                        var v = uncons(xs);
                        if (v instanceof Nothing) {
                            $tco_done1 = true;
                            return foldl(function (x) {
                                return function (i) {
                                    return i(x);
                                };
                            })(b)(ys);
                        }                        if (v instanceof Just) {
                            $tco_var_xs = v.value0.value1;
                            $copy_ys = new Cons(k(v.value0.value0), ys);
                            return;
                        }                        throw new Error("Failed pattern match at Data.CatList (line 120, column 14 - line 122, column 67): " + [ v.constructor.name ]);
                    }                    while (!$tco_done1) {
                        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                    }                    return $tco_result;
                };
            };
            return go(q)(Nil.value);
        };
    };
};
var uncons$1 = function (v) {
    if (v instanceof CatNil) {
        return Nothing.value;
    }    if (v instanceof CatCons) {
        return new Just(new Tuple(v.value0, (function () {
            var $65 = $$null(v.value1);
            if ($65) {
                return CatNil.value;
            }            return foldr(link)(CatNil.value)(v.value1);
        })()));
    }    throw new Error("Failed pattern match at Data.CatList (line 99, column 1 - line 99, column 61): " + [ v.constructor.name ]);
};
var empty$1 = /* #__PURE__ */ (function () {
    return CatNil.value;
})();
var append$1 = link;
var semigroupCatList = {
    append: append$1
};
var snoc$1 = function (cat) {
    return function (a) {
        return append$1(cat)(new CatCons(a, empty));
    };
};

// Generated by purs version 0.15.4
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var append$2 = /* #__PURE__ */ append(semigroupCatList);
var Free = /* #__PURE__ */ (function () {
    function Free(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Free.create = function (value0) {
        return function (value1) {
            return new Free(value0, value1);
        };
    };
    return Free;
})();
var Return = /* #__PURE__ */ (function () {
    function Return(value0) {
        this.value0 = value0;
    }    Return.create = function (value0) {
        return new Return(value0);
    };
    return Return;
})();
var Bind = /* #__PURE__ */ (function () {
    function Bind(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Bind.create = function (value0) {
        return function (value1) {
            return new Bind(value0, value1);
        };
    };
    return Bind;
})();
var toView = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        var runExpF = function (v2) {
            return v2;
        };
        var concatF = function (v2) {
            return function (r) {
                return new Free(v2.value0, append$2(v2.value1)(r));
            };
        };
        if (v.value0 instanceof Return) {
            var v2 = uncons$1(v.value1);
            if (v2 instanceof Nothing) {
                $tco_done = true;
                return new Return(v.value0.value0);
            }            if (v2 instanceof Just) {
                $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                return;
            }            throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
        }        if (v.value0 instanceof Bind) {
            $tco_done = true;
            return new Bind(v.value0.value0, function (a) {
                return concatF(v.value0.value1(a))(v.value1);
            });
        }        throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
    }    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    }    return $tco_result;
};
var runFreeM = function (dictFunctor) {
    var map1 = map(dictFunctor);
    return function (dictMonadRec) {
        var Monad0 = dictMonadRec.Monad0();
        var map2 = map(((Monad0.Bind1()).Apply0()).Functor0());
        var pure1 = pure(Monad0.Applicative0());
        var tailRecM$1 = tailRecM(dictMonadRec);
        return function (k) {
            var go = function (f) {
                var v = toView(f);
                if (v instanceof Return) {
                    return map2(Done.create)(pure1(v.value0));
                }                if (v instanceof Bind) {
                    return map2(Loop.create)(k(map1(v.value1)(v.value0)));
                }                throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [ v.constructor.name ]);
            };
            return tailRecM$1(go);
        };
    };
};
var fromView = function (f) {
    return new Free(f, empty$1);
};
var freeMonad = {
    Applicative0: function () {
        return freeApplicative;
    },
    Bind1: function () {
        return freeBind;
    }
};
var freeFunctor = {
    map: function (k) {
        return function (f) {
            return bindFlipped(freeBind)((function () {
                var $189 = pure(freeApplicative);
                return function ($190) {
                    return $189(k($190));
                };
            })())(f);
        };
    }
};
var freeBind = {
    bind: function (v) {
        return function (k) {
            return new Free(v.value0, snoc$1(v.value1)(k));
        };
    },
    Apply0: function () {
        return $lazy_freeApply(0);
    }
};
var freeApplicative = {
    pure: function ($191) {
        return fromView(Return.create($191));
    },
    Apply0: function () {
        return $lazy_freeApply(0);
    }
};
var $lazy_freeApply = /* #__PURE__ */ $runtime_lazy("freeApply", "Control.Monad.Free", function () {
    return {
        apply: ap(freeMonad),
        Functor0: function () {
            return freeFunctor;
        }
    };
});
var pure$1 = /* #__PURE__ */ pure(freeApplicative);
var liftF = function (f) {
    return fromView(new Bind(f, function ($192) {
        return pure$1($192);
    }));
};

const toNumber = function (n) {
  return n;
};

// Generated by purs version 0.15.4
var liftEffect = function (dict) {
    return dict.liftEffect;
};

const log = function (s) {
  return function () {
    console.log(s);
  };
};

//import events from 'events';
//
//function addGlobalEventListener(eventType, eventListener) {
//  if (typeof self !== 'undefined') { self.addEventListener(eventType, eventListener) }
//  else if (typeof window !== 'undefined') { self.addEventListener(eventType, eventListener) }
//  else if (typeof global !== 'undefined') {
//    if (!global.emitter) {
//      global.emitter = new events.EventEmitter();
//    }
//    global.emitter.on(eventType, eventListener);
//  }
//  else { throw new Error('unable to locate global object'); }
//};
//
//function emitGlobalEvent(eventType, event) {
//  if (typeof self !== 'undefined') { self.dispatchEvent(eventType, event) }
//  else if (typeof window !== 'undefined') { self.dispatchEvent(eventType, event) }
//  else if (typeof global !== 'undefined') {
//    if (global.emitter == 'undefined') {
//      global.emitter = new events.EventEmitter();
//    }
//    global.emitter.emit(eventType, event);
//  }
//  else { throw new Error('unable to locate global object'); }
//};

//function addLaffCallChainListener(callChainId) {
//  addGlobalEventListener(callChainId, function ([nextCall, continuation]) {
//    // Hack alert: store the call chain ID on the continuation
//    continuation.callChainId = callChainId;
//    nextCall(continuation);
//  });
//}
//
//let nextCallChainId = 0;

function runLaff(laff) {
  return function() {
    //let callChainId = nextCallChainId++;
    //addLaffCallChainListener(callChainId);
    function finalContinuation(a) {}    try {
      laff(finalContinuation);
      //emitGlobalEvent(callChainId, [laff, finalContinuation]);
    } catch (error) {
      //console.log("Error in laff call chain", callChainId, error);
      console.log("Error in laff", error);
    }
  }
}

function _map(f) {
  return function(laff){
    return function(continuation){
      function fContinuation(a){
        let b = f(a);
        continuation(b);
      }
      laff(fContinuation);
      //emitGlobalEvent(continuation.callChainId, [laff, fContinuation]);
    }
  }
}

function _pure(a) {
  return function(continuation){
    continuation(a);
  }
}

function _bind(laffA) {
  return function(fLaffB){
    return function(continuation){
      //emitGlobalEvent(continuation.callChainId, [laffA, function(a){ fLaffB(a)(continuation) }]);
      //laffA(function(a){ fLaffB(a)(continuation) });
      setTimeout(function(){
          laffA(function(a){fLaffB(a)(continuation);});
      }, 0);
    }
  }
}

function _liftEffect(eff) {
  return function(continuation) {
    continuation(eff());
  }
}

function delay(millis) {
  return function(continuation) {
    setTimeout(function(){ continuation(); }, millis);
  }
}

// https://stackoverflow.com/a/31090240
var isBrowser = new Function("try {return this===window;}catch(e){ return false;}");

// Generated by purs version 0.15.4
var $runtime_lazy$1 = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var functorLaff = {
    map: _map
};
var monadLaff = {
    Applicative0: function () {
        return applicativeLaff;
    },
    Bind1: function () {
        return bindLaff;
    }
};
var bindLaff = {
    bind: _bind,
    Apply0: function () {
        return $lazy_applyLaff(0);
    }
};
var applicativeLaff = {
    pure: _pure,
    Apply0: function () {
        return $lazy_applyLaff(0);
    }
};
var $lazy_applyLaff = /* #__PURE__ */ $runtime_lazy$1("applyLaff", "Effect.Laff", function () {
    return {
        apply: ap(monadLaff),
        Functor0: function () {
            return functorLaff;
        }
    };
});
var bind$1 = /* #__PURE__ */ bind(bindLaff);
var pure$2 = /* #__PURE__ */ pure(applicativeLaff);
var monadEffectLaff = {
    liftEffect: _liftEffect,
    Monad0: function () {
        return monadLaff;
    }
};
var monadRecLaff = {
    tailRecM: function (k) {
        var go = function (a) {
            return bind$1(k(a))(function (res) {
                if (res instanceof Done) {
                    return pure$2(res.value0);
                }                if (res instanceof Loop) {
                    return go(res.value0);
                }                throw new Error("Failed pattern match at Effect.Laff (line 93, column 7 - line 95, column 23): " + [ res.constructor.name ]);
            });
        };
        return go;
    },
    Monad0: function () {
        return monadLaff;
    }
};

// Generated by purs version 0.15.4
var identity$1 = /* #__PURE__ */ identity(categoryFn);
var discard$1 = /* #__PURE__ */ discard(discardUnit);
var show$1 = /* #__PURE__ */ show(showInt);
var pure1 = /* #__PURE__ */ pure(applicativeLaff);
var discard2 = /* #__PURE__ */ discard$1(bindLaff);
var liftEffect$1 = /* #__PURE__ */ liftEffect(monadEffectLaff);
var bind$2 = /* #__PURE__ */ bind(freeBind);
var pure2 = /* #__PURE__ */ pure(freeApplicative);
var discard3 = /* #__PURE__ */ discard$1(freeBind);
var bind1 = /* #__PURE__ */ bind(bindLaff);
var InitialState = /* #__PURE__ */ (function () {
    function InitialState() {

    }    InitialState.value = new InitialState();
    return InitialState;
})();
var ReceivingState = /* #__PURE__ */ (function () {
    function ReceivingState(value0) {
        this.value0 = value0;
    }    ReceivingState.create = function (value0) {
        return new ReceivingState(value0);
    };
    return ReceivingState;
})();
var DeepSleepingState = /* #__PURE__ */ (function () {
    function DeepSleepingState(value0) {
        this.value0 = value0;
    }    DeepSleepingState.create = function (value0) {
        return new DeepSleepingState(value0);
    };
    return DeepSleepingState;
})();
var MessageQuerySensor = /* #__PURE__ */ (function () {
    function MessageQuerySensor() {

    }    MessageQuerySensor.value = new MessageQuerySensor();
    return MessageQuerySensor;
})();
var MessageDoThingA = /* #__PURE__ */ (function () {
    function MessageDoThingA() {

    }    MessageDoThingA.value = new MessageDoThingA();
    return MessageDoThingA;
})();
var MessageDoThingB = /* #__PURE__ */ (function () {
    function MessageDoThingB() {

    }    MessageDoThingB.value = new MessageDoThingB();
    return MessageDoThingB;
})();
var Now = /* #__PURE__ */ (function () {
    function Now(value0) {
        this.value0 = value0;
    }    Now.create = function (value0) {
        return new Now(value0);
    };
    return Now;
})();
var Sleep = /* #__PURE__ */ (function () {
    function Sleep(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Sleep.create = function (value0) {
        return function (value1) {
            return new Sleep(value0, value1);
        };
    };
    return Sleep;
})();
var DeepSleep = /* #__PURE__ */ (function () {
    function DeepSleep(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    DeepSleep.create = function (value0) {
        return function (value1) {
            return new DeepSleep(value0, value1);
        };
    };
    return DeepSleep;
})();
var ReadBatteryVoltage = /* #__PURE__ */ (function () {
    function ReadBatteryVoltage(value0) {
        this.value0 = value0;
    }    ReadBatteryVoltage.create = function (value0) {
        return new ReadBatteryVoltage(value0);
    };
    return ReadBatteryVoltage;
})();
var Connect = /* #__PURE__ */ (function () {
    function Connect(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Connect.create = function (value0) {
        return function (value1) {
            return new Connect(value0, value1);
        };
    };
    return Connect;
})();
var Close = /* #__PURE__ */ (function () {
    function Close(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    Close.create = function (value0) {
        return function (value1) {
            return new Close(value0, value1);
        };
    };
    return Close;
})();
var SendMessage = /* #__PURE__ */ (function () {
    function SendMessage(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    }    SendMessage.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new SendMessage(value0, value1, value2);
            };
        };
    };
    return SendMessage;
})();
var ReceiveMessage = /* #__PURE__ */ (function () {
    function ReceiveMessage(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }    ReceiveMessage.create = function (value0) {
        return function (value1) {
            return new ReceiveMessage(value0, value1);
        };
    };
    return ReceiveMessage;
})();
var ReadSensor = /* #__PURE__ */ (function () {
    function ReadSensor(value0) {
        this.value0 = value0;
    }    ReadSensor.create = function (value0) {
        return new ReadSensor(value0);
    };
    return ReadSensor;
})();
var DoThingA = /* #__PURE__ */ (function () {
    function DoThingA(value0) {
        this.value0 = value0;
    }    DoThingA.create = function (value0) {
        return new DoThingA(value0);
    };
    return DoThingA;
})();
var DoThingB = /* #__PURE__ */ (function () {
    function DoThingB(value0) {
        this.value0 = value0;
    }    DoThingB.create = function (value0) {
        return new DoThingB(value0);
    };
    return DoThingB;
})();
var sleep = function (millis) {
    return liftF(new Sleep(millis, unit));
};
var sendMessage = function (socket) {
    return function (message) {
        return liftF(new SendMessage(socket, message, unit));
    };
};
var receiveMessage = function (socket) {
    return liftF(new ReceiveMessage(socket, identity$1));
};
var readSensor = /* #__PURE__ */ (function () {
    return liftF(new ReadSensor(identity$1));
})();
var readBatteryVoltage = /* #__PURE__ */ (function () {
    return liftF(new ReadBatteryVoltage(identity$1));
})();
var now = /* #__PURE__ */ (function () {
    return liftF(new Now(identity$1));
})();
var interpretPrinty = function (v) {
    if (v instanceof Now) {
        return pure1(v.value0(0));
    }    if (v instanceof Sleep) {
        return discard2(liftEffect$1(log("sleeping for " + show$1(v.value0))))(function () {
            return discard2(delay(toNumber(v.value0)))(function () {
                return pure1(v.value1);
            });
        });
    }    if (v instanceof DeepSleep) {
        return discard2(liftEffect$1(log("deep-sleeping for " + show$1(v.value0))))(function () {
            return discard2(delay(toNumber(v.value0)))(function () {
                return pure1(v.value1);
            });
        });
    }    if (v instanceof ReadBatteryVoltage) {
        return discard2(liftEffect$1(log("read battery voltage")))(function () {
            return pure1(v.value0(new Just(0.0)));
        });
    }    if (v instanceof Connect) {
        return discard2(liftEffect$1(log("connecting")))(function () {
            return pure1(v.value1(new Just(unit)));
        });
    }    if (v instanceof Close) {
        return discard2(liftEffect$1(log("close connection")))(function () {
            return pure1(v.value1);
        });
    }    if (v instanceof SendMessage) {
        return discard2(liftEffect$1(log("send message " + v.value1)))(function () {
            return pure1(v.value2);
        });
    }    if (v instanceof ReceiveMessage) {
        return discard2(liftEffect$1(log("received message DoThingA")))(function () {
            return pure1(v.value1(new Just(MessageDoThingA.value)));
        });
    }    if (v instanceof ReadSensor) {
        return discard2(liftEffect$1(log("sensor reading 0")))(function () {
            return pure1(v.value0(new Just(0.0)));
        });
    }    if (v instanceof DoThingA) {
        return discard2(liftEffect$1(log("do thing a")))(function () {
            return pure1(v.value0);
        });
    }    if (v instanceof DoThingB) {
        return discard2(liftEffect$1(log("do thing b")))(function () {
            return pure1(v.value0);
        });
    }    throw new Error("Failed pattern match at Main (line 203, column 1 - line 203, column 52): " + [ v.constructor.name ]);
};
var functorStateLangF = {
    map: function (f) {
        return function (v) {
            if (v instanceof Now) {
                return new Now(function ($108) {
                    return f(v.value0($108));
                });
            }            if (v instanceof Sleep) {
                return new Sleep(v.value0, f(v.value1));
            }            if (v instanceof DeepSleep) {
                return new DeepSleep(v.value0, f(v.value1));
            }            if (v instanceof ReadBatteryVoltage) {
                return new ReadBatteryVoltage(function ($109) {
                    return f(v.value0($109));
                });
            }            if (v instanceof Connect) {
                return new Connect(v.value0, function ($110) {
                    return f(v.value1($110));
                });
            }            if (v instanceof Close) {
                return new Close(v.value0, f(v.value1));
            }            if (v instanceof SendMessage) {
                return new SendMessage(v.value0, v.value1, f(v.value2));
            }            if (v instanceof ReceiveMessage) {
                return new ReceiveMessage(v.value0, function ($111) {
                    return f(v.value1($111));
                });
            }            if (v instanceof ReadSensor) {
                return new ReadSensor(function ($112) {
                    return f(v.value0($112));
                });
            }            if (v instanceof DoThingA) {
                return new DoThingA(f(v.value0));
            }            if (v instanceof DoThingB) {
                return new DoThingB(f(v.value0));
            }            throw new Error("Failed pattern match at Main (line 62, column 1 - line 74, column 38): " + [ f.constructor.name, v.constructor.name ]);
        };
    }
};
var runFreeM$1 = /* #__PURE__ */ runFreeM(functorStateLangF)(monadRecLaff);
var doThingB = /* #__PURE__ */ (function () {
    return liftF(new DoThingB(unit));
})();
var doThingA = /* #__PURE__ */ (function () {
    return liftF(new DoThingA(unit));
})();
var deepSleep = function (millis) {
    return liftF(new DeepSleep(millis, unit));
};
var connect = function (connectionConfig) {
    return liftF(new Connect(connectionConfig, identity$1));
};
var close = function (socket) {
    return liftF(new Close(socket, unit));
};
var program = function (config) {
    return function (v) {
        if (v instanceof InitialState) {
            return bind$2(readBatteryVoltage)(function (v1) {
                if (v1 instanceof Nothing) {
                    return pure2(new DeepSleepingState({
                        socket: Nothing.value
                    }));
                }                if (v1 instanceof Just) {
                    var $90 = v1.value0 < 3.3;
                    if ($90) {
                        return pure2(new DeepSleepingState({
                            socket: Nothing.value
                        }));
                    }                    return bind$2(connect(config.connectionConfig))(function (v2) {
                        if (v2 instanceof Nothing) {
                            return pure2(new DeepSleepingState({
                                socket: Nothing.value
                            }));
                        }                        if (v2 instanceof Just) {
                            return discard3(sendMessage(v2.value0)("batteryVoltage"))(function () {
                                return bind$2(now)(function (nowMillis) {
                                    return pure2(new ReceivingState({
                                        timeLastSendBatteryVoltageMillis: nowMillis,
                                        socket: v2.value0
                                    }));
                                });
                            });
                        }                        throw new Error("Failed pattern match at Main (line 124, column 50 - line 129, column 105): " + [ v2.constructor.name ]);
                    });
                }                throw new Error("Failed pattern match at Main (line 118, column 31 - line 129, column 105): " + [ v1.constructor.name ]);
            });
        }        if (v instanceof ReceivingState) {
            return discard3(sleep(config.loopSleepMillis))(function () {
                return bind$2(receiveMessage(v.value0.socket))(function (v1) {
                    if (v1 instanceof Just && v1.value0 instanceof MessageQuerySensor) {
                        return bind$2(readSensor)(function (v2) {
                            if (v2 instanceof Nothing) {
                                return pure2(new ReceivingState(v.value0));
                            }                            if (v2 instanceof Just) {
                                return discard3(sendMessage(v.value0.socket)("<sensorReading>"))(function () {
                                    return pure2(new ReceivingState(v.value0));
                                });
                            }                            throw new Error("Failed pattern match at Main (line 134, column 27 - line 138, column 43): " + [ v2.constructor.name ]);
                        });
                    }                    if (v1 instanceof Just && v1.value0 instanceof MessageDoThingA) {
                        return discard3(doThingA)(function () {
                            return pure2(new ReceivingState(v.value0));
                        });
                    }                    if (v1 instanceof Just && v1.value0 instanceof MessageDoThingB) {
                        return discard3(doThingB)(function () {
                            return pure2(new ReceivingState(v.value0));
                        });
                    }                    if (v1 instanceof Nothing) {
                        return bind$2(readBatteryVoltage)(function (v2) {
                            if (v2 instanceof Nothing) {
                                return pure2(new ReceivingState(v.value0));
                            }                            if (v2 instanceof Just) {
                                return bind$2(now)(function (nowMillis) {
                                    return discard3((function () {
                                        var $101 = nowMillis > (v.value0.timeLastSendBatteryVoltageMillis + config.batteryVoltageSendPeriodMillis | 0);
                                        if ($101) {
                                            return sendMessage(v.value0.socket)("batteryVoltage");
                                        }                                        return pure2(unit);
                                    })())(function () {
                                        var $102 = v2.value0 < 3.3;
                                        if ($102) {
                                            return pure2(new DeepSleepingState({
                                                socket: Nothing.value
                                            }));
                                        }                                        return pure2(new ReceivingState({
                                            socket: v.value0.socket,
                                            timeLastSendBatteryVoltageMillis: nowMillis
                                        }));
                                    });
                                });
                            }                            throw new Error("Failed pattern match at Main (line 146, column 35 - line 155, column 99): " + [ v2.constructor.name ]);
                        });
                    }                    throw new Error("Failed pattern match at Main (line 132, column 40 - line 155, column 99): " + [ v1.constructor.name ]);
                });
            });
        }        if (v instanceof DeepSleepingState) {
            return discard3((function () {
                if (v.value0.socket instanceof Nothing) {
                    return pure2(unit);
                }                if (v.value0.socket instanceof Just) {
                    return close(v.value0.socket.value0);
                }                throw new Error("Failed pattern match at Main (line 157, column 8 - line 159, column 37): " + [ v.value0.socket.constructor.name ]);
            })())(function () {
                return discard3(deepSleep(config.deepSleepMillis))(function () {
                    return pure2(InitialState.value);
                });
            });
        }        throw new Error("Failed pattern match at Main (line 116, column 4 - line 161, column 25): " + [ v.constructor.name ]);
    };
};
var runProgram = function (interpreter) {
    return function (s) {
        var programLoopStep = program({
            loopSleepMillis: 100,
            batteryVoltageSendPeriodMillis: 500,
            deepSleepMillis: 200,
            connectionConfig: {
                timeout_millis: 5000,
                host: "localhost",
                port: 44404,
                wifi_ssid: "hello",
                wifi_password: "hi"
            }
        })(s);
        return discard2(liftEffect$1(log("Doing one loopo")))(function () {
            return bind1(runFreeM$1(interpreter)(programLoopStep))(function (s$prime) {
                return runProgram(interpreter)(s$prime);
            });
        });
    };
};
var runPrinty = function __do() {
    log("Hello printy printo!")();
    runLaff(runProgram(interpretPrinty)(InitialState.value))();
    return unit;
};

runPrinty();
